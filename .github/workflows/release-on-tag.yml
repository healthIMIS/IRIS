name: Build and release runnable Jars for IRIS apps

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout code
        uses: actions/checkout@v2.3.4

      - name: Cache local Maven repository
        uses: actions/cache@v2.1.6
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      - name: build Jars and Images
        run: mvn -B clean package spring-boot:repackage spring-boot:build-image -Dspring-boot.build-image.publish=true -Dversion.tag=${{ steps.get_version.outputs.VERSION }}
        env:
          GIT_TAG: ${{ steps.get_version.outputs.VERSION }}
          DOCKER_HUB_USER: ${{ secrets.DOCKER_HUB_USER }}
          DOCKER_HUB_PW: ${{ secrets.DOCKER_HUB_PW }}

      - uses: montudor/action-zip@v1
        with:
          args: zip -qq -r deployment-${{ steps.get_version.outputs.VERSION }}.zip infrastructure

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          prerelease: true
          files: |
            **/target/*${{ steps.get_version.outputs.VERSION }}.jar
            **/deployment-${{ steps.get_version.outputs.VERSION }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deployment-test:
    needs: build
    runs-on: [self-hosted, env-test]
    container: alpine/helm:3.5.4

    environment: test

    steps:
      - uses: actions/checkout@v1

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      - name: Prepare k8s config
        run: >
          rm -rf ~/.kube &&
          mkdir ~/.kube &&
          echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config

      - name: Update Helm dependencys
        run: helm dependency update ./infrastructure/iris-gateway

      - name: Run helm deployment
        run: >
          helm upgrade --install
          --namespace iris-gateway
          --set environment=test
          --set locations.tag="${{ steps.get_version.outputs.VERSION }}"
          --set postgresqlha.postgresql.repmgrPassword="${{ secrets.REPMGR_PASSWORD }}"
          --set postgresqlha.pgpool.adminPassword="${{ secrets.PGPOOL_ADMIN_PASSWORD }}"
          --set postgresqlha.postgresql.password="${{ secrets.POSTGRESQL_PASSWORD }}"
          --set postgresqlha.pgpool.customUsers.passwords="${{ secrets.POSTGRESQL_PASSWORD }}"
          --wait
          --timeout 3m
          --debug
          iris-gateway ./infrastructure/iris-gateway

      - name: Delete downloaded helm charts
        if: ${{ always() }}
        run: >
          rm -rf iris-gateway/infrastructure/iris-gateway/charts

  deployment-prod:
    needs: deployment-test
    runs-on: [self-hosted, env-prod]
    container: alpine/helm:3.5.4

    environment: production

    steps:
      - uses: actions/checkout@v1

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      - name: Prepare k8s config
        run: >
          rm -rf ~/.kube &&
          mkdir ~/.kube &&
          echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config

      - name: Update Helm dependencys
        run: helm dependency update ./infrastructure/iris-gateway

      - name: Run helm deployment
        run: >
          helm upgrade --install
          --namespace iris-gateway
          --set environment=production
          --set locations.tag="${{ steps.get_version.outputs.VERSION }}"
          --set postgresqlha.postgresql.repmgrPassword="${{ secrets.REPMGR_PASSWORD }}"
          --set postgresqlha.pgpool.adminPassword="${{ secrets.PGPOOL_ADMIN_PASSWORD }}"
          --set postgresqlha.postgresql.password="${{ secrets.POSTGRESQL_PASSWORD }}"
          --set postgresqlha.pgpool.customUsers.passwords="${{ secrets.POSTGRESQL_PASSWORD }}"
          --atomic
          --timeout 3m
          --debug
          iris-gateway ./infrastructure/iris-gateway

      - name: Delete downloaded helm charts
        if: ${{ always() }}
        run: >
          rm -rf iris-gateway/infrastructure/iris-gateway/charts
