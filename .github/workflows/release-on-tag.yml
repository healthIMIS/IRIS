name: Release on tag

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout code
        uses: actions/checkout@v2.3.4

      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Cache local Maven repository
        uses: actions/cache@v2.1.7
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      - name: build Jars and Images
        run: mvn -B clean verify spring-boot:repackage spring-boot:build-image -Dspring-boot.build-image.publish=true -Dversion.tag=${{ steps.get_version.outputs.VERSION }}
        env:
          GIT_TAG: ${{ steps.get_version.outputs.VERSION }}
          DOCKER_HUB_USER: ${{ secrets.DOCKER_HUB_USER }}
          DOCKER_HUB_PW: ${{ secrets.DOCKER_HUB_PW }}
          
      - name: Upload Test Reports
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: test-reports
          path: |
            **/surefire-reports/*.xml
            **/failsafe-reports/*.xml
            !**/failsafe-reports/failsafe-summary.xml

  deployment-test:
    needs: build
    uses: iris-connect/iris-gateway/.github/workflows/helm-deployment.yml@develop
    with: 
      runs_on: "[ 'self-hosted', 'env-test' ]"
      env: test
      helm_option: --wait
      slack_channel: C028EFY8LCW
    secrets:
      KUBECONFIG: ${{ secrets.KUBECONFIG }}
      REPMGR_PASSWORD: ${{ secrets.REPMGR_PASSWORD }}
      PGPOOL_ADMIN_PASSWORD: ${{ secrets.PGPOOL_ADMIN_PASSWORD }}
      POSTGRESQL_PASSWORD: ${{ secrets.POSTGRESQL_PASSWORD }}
      SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}
      AKDB_PROXY_HOST: ${{ secrets.AKDB_PROXY_HOST }}
      AKDB_PROXY_PORT: ${{ secrets.AKDB_PROXY_PORT }}
      CAT_SALT: ${{ secrets.CAT_SALT }}
      DAT_SALT: ${{ secrets.DAT_SALT }}

  deployment-prod:
    needs: deployment-test
    uses: iris-connect/iris-gateway/.github/workflows/helm-deployment.yml@develop
    with:
      runs_on: "[ 'self-hosted', 'env-prod' ]"
      env: production
      helm_option: --atomic
      slack_channel: C02EXH4L80M
    secrets:
      KUBECONFIG: ${{ secrets.KUBECONFIG }}
      REPMGR_PASSWORD: ${{ secrets.REPMGR_PASSWORD }}
      PGPOOL_ADMIN_PASSWORD: ${{ secrets.PGPOOL_ADMIN_PASSWORD }}
      POSTGRESQL_PASSWORD: ${{ secrets.POSTGRESQL_PASSWORD }}
      SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}
      AKDB_PROXY_HOST: ${{ secrets.AKDB_PROXY_HOST }}
      AKDB_PROXY_PORT: ${{ secrets.AKDB_PROXY_PORT }}
      CAT_SALT: ${{ secrets.CAT_SALT }}
      DAT_SALT: ${{ secrets.DAT_SALT }}

  publish-test-results:
    name: Publish Test Results
    needs: build
    runs-on: ubuntu-latest
    # the build-and-test job might be skipped, we don't need to run this job then
    if: success() || failure()
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: test-reports
          path: reports

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        with:
          files: reports/**/*.xml
          report_individual_runs: true
          check_run_annotations_branch: "*"

  container_scan:
    needs: build
    name: Trivy Container Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: [ 'iris-backend-service', 'demo-checkin-app', 'demo-contact-diary-app']
    steps:
      - name: Checkout code
        uses: actions/checkout@v2.3.4

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'inoeg/${{matrix.image}}:${{ steps.get_version.outputs.VERSION }}'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: 'trivy-results.sarif'
