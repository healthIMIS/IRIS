/*
 * IRIS-Gateway API
 * ### Encryption of the data to be transmitted (contact data) In order to be not limited in the amount of data, a hybrid encryption with symmetric encryption of the data and asymmetric encryption of the symmetric key is used for the encryption of the contact data.    1. The apps and applications get the public key of the health department as a 4096-bit RSA key from the IRIS+ server. This key is base64-encoded similar to the Private Enhanced Mail (PEM) format but without key markers (-----BEGIN PUBLIC KEY----- / -----END PUBLIC KEY-----).   2. The app generates a 256-bit AES key.   3. The data is encrypted with this key (algorithm: AES/CBC/PKCS5Padding and 16 byte IV)   4. IV bytes are prepended to the cipher text. Those merged bytes represent the encrypted content.   5. The AES key must be encrypted with the public RSA key of the health department. (algorithm: RSA with Optimal Asymmetric Encryption Padding (OAEP) \"RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING\")   6. The encrypted AES key and the encrypted content must be transmitted base64 encoded.    #### Schematic sequence    ```   pubKeyEncryption = publicKeyFromBase64(givenPublicKey);   contentKey = generateAESKey();   iv = generateRandomBytes(16);    encrypted = contentKey.encrypt(content, \"AES/CBC/PKCS5Padding\", iv);   keyEncrypted = pubKeyEncryption.encrypt(contentKey, \"RSA/NONE/OAEPWithSHA3-256AndMGF1Padding\");    submissionDto.encryptedData = base64Encode(concat(iv,encrypted));   submissionDto.secret = base64Encode(keyEncrypted);   ``` 
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: jens.kutzsche@gebea.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package iris.demo.contact_diary_app.model;

import java.util.Objects;

/**
 * Additional informations about the work place of the contact person.
 */
public class ContactPersonAllOfWorkPlace {
	public static final String SERIALIZED_NAME_NAME = "name";
	private String name;

	public static final String SERIALIZED_NAME_POINT_OF_CONTACT = "pointOfContact";
	private String pointOfContact;

	public static final String SERIALIZED_NAME_PHONE = "phone";
	private String phone;

	public static final String SERIALIZED_NAME_ADDRESS = "address";
	private Address address;

	public ContactPersonAllOfWorkPlace name(String name) {

		this.name = name;
		return this;
	}

	/**
	 * Name of work place
	 * 
	 * @return name
	 **/

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public ContactPersonAllOfWorkPlace pointOfContact(String pointOfContact) {

		this.pointOfContact = pointOfContact;
		return this;
	}

	/**
	 * Get pointOfContact
	 * 
	 * @return pointOfContact
	 **/

	public String getPointOfContact() {
		return pointOfContact;
	}

	public void setPointOfContact(String pointOfContact) {
		this.pointOfContact = pointOfContact;
	}

	public ContactPersonAllOfWorkPlace phone(String phone) {

		this.phone = phone;
		return this;
	}

	/**
	 * Get phone
	 * 
	 * @return phone
	 **/

	public String getPhone() {
		return phone;
	}

	public void setPhone(String phone) {
		this.phone = phone;
	}

	public ContactPersonAllOfWorkPlace address(Address address) {

		this.address = address;
		return this;
	}

	/**
	 * Get address
	 * 
	 * @return address
	 **/

	public Address getAddress() {
		return address;
	}

	public void setAddress(Address address) {
		this.address = address;
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		ContactPersonAllOfWorkPlace contactPersonAllOfWorkPlace = (ContactPersonAllOfWorkPlace) o;
		return Objects.equals(this.name, contactPersonAllOfWorkPlace.name) &&
				Objects.equals(this.pointOfContact, contactPersonAllOfWorkPlace.pointOfContact) &&
				Objects.equals(this.phone, contactPersonAllOfWorkPlace.phone) &&
				Objects.equals(this.address, contactPersonAllOfWorkPlace.address);
	}

	@Override
	public int hashCode() {
		return Objects.hash(name, pointOfContact, phone, address);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class ContactPersonAllOfWorkPlace {\n");
		sb.append("    name: ").append(toIndentedString(name)).append("\n");
		sb.append("    pointOfContact: ").append(toIndentedString(pointOfContact)).append("\n");
		sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
		sb.append("    address: ").append(toIndentedString(address)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces (except the first line).
	 */
	private String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

}
