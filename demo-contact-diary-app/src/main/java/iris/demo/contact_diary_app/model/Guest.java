/*
 * IRIS-Gateway API
 * ### Encryption of the data to be transmitted (contact data) In order to be not limited in the amount of data, a hybrid encryption with symmetric encryption of the data and asymmetric encryption of the symmetric key is used for the encryption of the contact data.    1. The apps and applications get the public key of the health department as a 4096-bit RSA key from the IRIS+ server. This key is base64-encoded similar to the Private Enhanced Mail (PEM) format but without key markers (-----BEGIN PUBLIC KEY----- / -----END PUBLIC KEY-----).   2. The app generates a 256-bit AES key.   3. The data is encrypted with this key (algorithm: AES/CBC/PKCS5Padding and 16 byte IV)   4. IV bytes are prepended to the cipher text. Those merged bytes represent the encrypted content.   5. The AES key must be encrypted with the public RSA key of the health department. (algorithm: RSA with Optimal Asymmetric Encryption Padding (OAEP) \"RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING\")   6. The encrypted AES key and the encrypted content must be transmitted base64 encoded.    #### Schematic sequence    ```   pubKeyEncryption = publicKeyFromBase64(givenPublicKey);   contentKey = generateAESKey();   iv = generateRandomBytes(16);    encrypted = contentKey.encrypt(content, \"AES/CBC/PKCS5Padding\", iv);   keyEncrypted = pubKeyEncryption.encrypt(contentKey, \"RSA/NONE/OAEPWithSHA3-256AndMGF1Padding\");    submissionDto.encryptedData = base64Encode(concat(iv,encrypted));   submissionDto.secret = base64Encode(keyEncrypted);   ``` 
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: jens.kutzsche@gebea.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package iris.demo.contact_diary_app.model;

import java.time.LocalDate;
import java.util.Objects;

/**
 * Extended person data type for a guest who attended a queried event or location in the queried time.
 */
public class Guest {
	public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
	private String firstName;

	public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
	private String lastName;

	public static final String SERIALIZED_NAME_DATE_OF_BIRTH = "dateOfBirth";
	private LocalDate dateOfBirth;

	public static final String SERIALIZED_NAME_SEX = "sex";
	private Sex sex = Sex.UNKNOWN;

	public static final String SERIALIZED_NAME_EMAIL = "email";
	private String email;

	public static final String SERIALIZED_NAME_PHONE = "phone";
	private String phone;

	public static final String SERIALIZED_NAME_MOBILE_PHONE = "mobilePhone";
	private String mobilePhone;

	public static final String SERIALIZED_NAME_ADDRESS = "address";
	private Address address;

	public static final String SERIALIZED_NAME_ATTENDANCE_INFORMATION = "attendanceInformation";
	private GuestAllOfAttendanceInformation attendanceInformation;

	public static final String SERIALIZED_NAME_IDENTITY_CHECKED = "identityChecked";
	private Boolean identityChecked;

	public Guest firstName(String firstName) {

		this.firstName = firstName;
		return this;
	}

	/**
	 * Get firstName
	 * 
	 * @return firstName
	 **/

	public String getFirstName() {
		return firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	public Guest lastName(String lastName) {

		this.lastName = lastName;
		return this;
	}

	/**
	 * Get lastName
	 * 
	 * @return lastName
	 **/

	public String getLastName() {
		return lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	public Guest dateOfBirth(LocalDate dateOfBirth) {

		this.dateOfBirth = dateOfBirth;
		return this;
	}

	/**
	 * Get dateOfBirth
	 * 
	 * @return dateOfBirth
	 **/

	public LocalDate getDateOfBirth() {
		return dateOfBirth;
	}

	public void setDateOfBirth(LocalDate dateOfBirth) {
		this.dateOfBirth = dateOfBirth;
	}

	public Guest sex(Sex sex) {

		this.sex = sex;
		return this;
	}

	/**
	 * Get sex
	 * 
	 * @return sex
	 **/

	public Sex getSex() {
		return sex;
	}

	public void setSex(Sex sex) {
		this.sex = sex;
	}

	public Guest email(String email) {

		this.email = email;
		return this;
	}

	/**
	 * Get email
	 * 
	 * @return email
	 **/

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public Guest phone(String phone) {

		this.phone = phone;
		return this;
	}

	/**
	 * Get phone
	 * 
	 * @return phone
	 **/

	public String getPhone() {
		return phone;
	}

	public void setPhone(String phone) {
		this.phone = phone;
	}

	public Guest mobilePhone(String mobilePhone) {

		this.mobilePhone = mobilePhone;
		return this;
	}

	/**
	 * Get mobilePhone
	 * 
	 * @return mobilePhone
	 **/

	public String getMobilePhone() {
		return mobilePhone;
	}

	public void setMobilePhone(String mobilePhone) {
		this.mobilePhone = mobilePhone;
	}

	public Guest address(Address address) {

		this.address = address;
		return this;
	}

	/**
	 * Get address
	 * 
	 * @return address
	 **/

	public Address getAddress() {
		return address;
	}

	public void setAddress(Address address) {
		this.address = address;
	}

	public Guest attendanceInformation(GuestAllOfAttendanceInformation attendanceInformation) {

		this.attendanceInformation = attendanceInformation;
		return this;
	}

	/**
	 * Get attendanceInformation
	 * 
	 * @return attendanceInformation
	 **/

	public GuestAllOfAttendanceInformation getAttendanceInformation() {
		return attendanceInformation;
	}

	public void setAttendanceInformation(GuestAllOfAttendanceInformation attendanceInformation) {
		this.attendanceInformation = attendanceInformation;
	}

	public Guest identityChecked(Boolean identityChecked) {

		this.identityChecked = identityChecked;
		return this;
	}

	/**
	 * The app indicates whether the data are verified with respect to identity (e.g. by phone number) &#x3D; TRUE or
	 * whether they are unverified form inputs &#x3D; FALSE.
	 * 
	 * @return identityChecked
	 **/

	public Boolean getIdentityChecked() {
		return identityChecked;
	}

	public void setIdentityChecked(Boolean identityChecked) {
		this.identityChecked = identityChecked;
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		Guest guest = (Guest) o;
		return Objects.equals(this.firstName, guest.firstName) &&
				Objects.equals(this.lastName, guest.lastName) &&
				Objects.equals(this.dateOfBirth, guest.dateOfBirth) &&
				Objects.equals(this.sex, guest.sex) &&
				Objects.equals(this.email, guest.email) &&
				Objects.equals(this.phone, guest.phone) &&
				Objects.equals(this.mobilePhone, guest.mobilePhone) &&
				Objects.equals(this.address, guest.address) &&
				Objects.equals(this.attendanceInformation, guest.attendanceInformation) &&
				Objects.equals(this.identityChecked, guest.identityChecked);
	}

	@Override
	public int hashCode() {
		return Objects.hash(firstName, lastName, dateOfBirth, sex, email, phone, mobilePhone, address,
				attendanceInformation, identityChecked);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class Guest {\n");
		sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
		sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
		sb.append("    dateOfBirth: ").append(toIndentedString(dateOfBirth)).append("\n");
		sb.append("    sex: ").append(toIndentedString(sex)).append("\n");
		sb.append("    email: ").append(toIndentedString(email)).append("\n");
		sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
		sb.append("    mobilePhone: ").append(toIndentedString(mobilePhone)).append("\n");
		sb.append("    address: ").append(toIndentedString(address)).append("\n");
		sb.append("    attendanceInformation: ").append(toIndentedString(attendanceInformation)).append("\n");
		sb.append("    identityChecked: ").append(toIndentedString(identityChecked)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces (except the first line).
	 */
	private String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

}
