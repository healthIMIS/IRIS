/*
 * IRIS-Gateway API
 * ### Encryption of the data to be transmitted (contact data) In order to be not limited in the amount of data, a hybrid encryption with symmetric encryption of the data and asymmetric encryption of the symmetric key is used for the encryption of the contact data.    1. The apps and applications get the public key of the health department as a 4096-bit RSA key from the IRIS+ server. This key is base64-encoded similar to the Private Enhanced Mail (PEM) format but without key markers (-----BEGIN PUBLIC KEY----- / -----END PUBLIC KEY-----).   2. The app generates a 256-bit AES key.   3. The data is encrypted with this key (algorithm: AES/CBC/PKCS5Padding and 16 byte IV)   4. IV bytes are prepended to the cipher text. Those merged bytes represent the encrypted content.   5. The AES key must be encrypted with the public RSA key of the health department. (algorithm: RSA with Optimal Asymmetric Encryption Padding (OAEP) \"RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING\")   6. The encrypted AES key and the encrypted content must be transmitted base64 encoded.    #### Schematic sequence    ```   pubKeyEncryption = publicKeyFromBase64(givenPublicKey);   contentKey = generateAESKey();   iv = generateRandomBytes(16);    encrypted = contentKey.encrypt(content, \"AES/CBC/PKCS5Padding\", iv);   keyEncrypted = pubKeyEncryption.encrypt(contentKey, \"RSA/NONE/OAEPWithSHA3-256AndMGF1Padding\");    submissionDto.encryptedData = base64Encode(concat(iv,encrypted));   submissionDto.secret = base64Encode(keyEncrypted);   ``` 
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: jens.kutzsche@gebea.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package iris.demo.contact_diary_app.model;

import java.time.Instant;
import java.util.Objects;

/**
 * GuestAllOfAttendanceInformation
 */
public class GuestAllOfAttendanceInformation {
	public static final String SERIALIZED_NAME_DESCRIPTION_OF_PARTICIPATION = "descriptionOfParticipation";
	private String descriptionOfParticipation;

	public static final String SERIALIZED_NAME_ATTEND_FROM = "attendFrom";
	private Instant attendFrom;

	public static final String SERIALIZED_NAME_ATTEND_TO = "attendTo";
	private Instant attendTo;

	public static final String SERIALIZED_NAME_ADDITIONAL_INFORMATION = "additionalInformation";
	private String additionalInformation;

	public GuestAllOfAttendanceInformation descriptionOfParticipation(String descriptionOfParticipation) {

		this.descriptionOfParticipation = descriptionOfParticipation;
		return this;
	}

	/**
	 * Description of the type of participation.
	 * 
	 * @return descriptionOfParticipation
	 **/

	public String getDescriptionOfParticipation() {
		return descriptionOfParticipation;
	}

	public void setDescriptionOfParticipation(String descriptionOfParticipation) {
		this.descriptionOfParticipation = descriptionOfParticipation;
	}

	public GuestAllOfAttendanceInformation attendFrom(Instant attendFrom) {

		this.attendFrom = attendFrom;
		return this;
	}

	/**
	 * Start date/time of attendance of this guest.
	 * 
	 * @return attendFrom
	 **/

	public Instant getAttendFrom() {
		return attendFrom;
	}

	public void setAttendFrom(Instant attendFrom) {
		this.attendFrom = attendFrom;
	}

	public GuestAllOfAttendanceInformation attendTo(Instant attendTo) {

		this.attendTo = attendTo;
		return this;
	}

	/**
	 * End date/time of attendance of this guest.
	 * 
	 * @return attendTo
	 **/

	public Instant getAttendTo() {
		return attendTo;
	}

	public void setAttendTo(Instant attendTo) {
		this.attendTo = attendTo;
	}

	public GuestAllOfAttendanceInformation additionalInformation(String additionalInformation) {

		this.additionalInformation = additionalInformation;
		return this;
	}

	/**
	 * Additional informations about the attendance.
	 * 
	 * @return additionalInformation
	 **/

	public String getAdditionalInformation() {
		return additionalInformation;
	}

	public void setAdditionalInformation(String additionalInformation) {
		this.additionalInformation = additionalInformation;
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		GuestAllOfAttendanceInformation guestAllOfAttendanceInformation = (GuestAllOfAttendanceInformation) o;
		return Objects.equals(this.descriptionOfParticipation, guestAllOfAttendanceInformation.descriptionOfParticipation)
				&&
				Objects.equals(this.attendFrom, guestAllOfAttendanceInformation.attendFrom) &&
				Objects.equals(this.attendTo, guestAllOfAttendanceInformation.attendTo) &&
				Objects.equals(this.additionalInformation, guestAllOfAttendanceInformation.additionalInformation);
	}

	@Override
	public int hashCode() {
		return Objects.hash(descriptionOfParticipation, attendFrom, attendTo, additionalInformation);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class GuestAllOfAttendanceInformation {\n");
		sb.append("    descriptionOfParticipation: ").append(toIndentedString(descriptionOfParticipation)).append("\n");
		sb.append("    attendFrom: ").append(toIndentedString(attendFrom)).append("\n");
		sb.append("    attendTo: ").append(toIndentedString(attendTo)).append("\n");
		sb.append("    additionalInformation: ").append(toIndentedString(additionalInformation)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces (except the first line).
	 */
	private String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

}
