# configuration of the server
server {
    server_name api.staging.iris-gateway.de;
    listen 443 ssl;

    ssl_certificate /etc/letsencrypt/live/staging.iris-gateway.de/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/staging.iris-gateway.de/privkey.pem;
    ssl_dhparam /etc/letsencrypt/dhparams.pem;


    if ($host != api.staging.iris-gateway.de) {
        return 404;
    }

    proxy_http_version                 1.1;
    proxy_cache_bypass                 $http_upgrade;

    # Proxy headers
    proxy_set_header Upgrade           $http_upgrade;
    proxy_set_header Host              $host;
    proxy_set_header X-Real-IP         $remote_addr;
    proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Host  $host;
    proxy_set_header X-Forwarded-Port  $server_port;

    # Proxy timeouts
    proxy_connect_timeout              60s;
    proxy_send_timeout                 60s;
    proxy_read_timeout                 60s;


    ### BEGIN CORS ###

    # This is necessary here, because https://www.nginx.com/resources/wiki/start/topics/depth/ifisevil/
    # and also, can't have add_headers in an if block.. also can't overwrite the add_headers, only
    # by repetition in the location blocks

    set $cors_origin "";
    set $cors_cred   "";
    set $cors_header "";
    set $cors_method "";
    set $cors_maxage "";
    if ( $http_origin ~* ((https:\/\/iris.staging.iris-gateway\.de|http:\/\/localhost:8080)$)) {
            set $cors_origin $http_origin;
            set $cors_cred   true;
            set $cors_header "*";
            set $cors_method "*";
            set $cors_maxage "86400";
    }

    # "always" keyword is required to also set access-control headers in case of error responses.
    # Otherwise errors like 403 will not be forwarded by nginx and instead
    add_header Access-Control-Allow-Origin      $cors_origin    always;
    add_header Access-Control-Allow-Credentials $cors_cred      always;
    add_header Access-Control-Allow-Headers     $cors_header    always;
    add_header Access-Control-Allow-Methods     $cors_method    always;
    add_header Access-Control-Max-Age           $cors_maxage    always;
    add_header Vary                             origin          always;

    # preflight requests
     if ($request_method = OPTIONS) {
        return 204;
     }

     # here we reset the unnecessary headers

    location /data-requests-client/ {
        proxy_pass  http://iris-client:8092;
    }

    location /search {
        # only for staging, so that calls from external clients do not go through the internal client.
        proxy_pass  http://iris-location:8080;
    }

    location /login {
        proxy_pass  http://iris-client:8092;
    }

    location /users {
        proxy_pass  http://iris-client:8092;
    }

    location /user-profile {
        proxy_pass  http://iris-client:8092;
    }

    location /search-index/ {
        proxy_pass  http://iris-location:8080;
    }

    location / {
        # todo ssl
        proxy_ssl_verify off;

        proxy_pass  https://iris-public:8443;

        proxy_ssl_certificate     /etc/letsencrypt/live/staging.iris-gateway.de/fullchain.pem;
        proxy_ssl_certificate_key /etc/letsencrypt/live/staging.iris-gateway.de/privkey.pem;
        proxy_ssl_protocols       TLSv1.2 TLSv1.3;
        proxy_ssl_ciphers         HIGH:!aNULL:!MD5;
    }
}
