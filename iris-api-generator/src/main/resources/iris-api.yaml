openapi: 3.0.2
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/jekutzsche/iris_public/0.2.0
tags:
  - name: "IrisLocationService"
  - name: "IrisPublicServer"
  - name: "IrisSidecarServer"
  - name: "IrisSidecarClient"
  - name: "IrisClientFrontend"
  - name: "IrisAppClient"

info:
  title: 'IRIS-Gateway API'
  version: 0.2.0
  description: >
    ### Encryption of the data to be transmitted (contact data)

    In order to be not limited in the amount of data, a hybrid encryption with symmetric encryption of the data and asymmetric encryption of the symmetric key is used for the encryption of the contact data.

      1. The apps and applications get the public key of the health department as a 4096-bit RSA key from the IRIS+ server. This key is base64-encoded similar to the Private Enhanced Mail (PEM) format but without key markers (-----BEGIN PUBLIC KEY----- / -----END PUBLIC KEY-----).
      2. The app generates a 256-bit AES key.
      3. The data is encrypted with this key (algorithm: AES/CBC/PKCS5Padding and 16 byte IV)
      4. IV bytes are prepended to the cipher text. Those merged bytes represent the encrypted content.
      5. The AES key must be encrypted with the public RSA key of the health department. (algorithm: RSA with Optimal Asymmetric Encryption Padding (OAEP) "RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING")
      6. The encrypted AES key and the encrypted content must be transmitted base64 encoded.

      #### Schematic sequence

      ```
      pubKeyEncryption = publicKeyFromBase64(givenPublicKey);
      contentKey = generateAESKey();
      iv = generateRandomBytes(16);

      encrypted = contentKey.encrypt(content, "AES/CBC/PKCS5Padding", iv);
      keyEncrypted = pubKeyEncryption.encrypt(contentKey, "RSA/NONE/OAEPWithSHA3-256AndMGF1Padding");

      submissionDto.encryptedData = base64Encode(concat(iv,encrypted));
      submissionDto.secret = base64Encode(keyEncrypted);
      ```
  contact:
    name: Jens Kutzsche (IMIS)
    email: jens.kutzsche@gebea.de
  license:
    name: GNU AGPL v3
    url: https://www.gnu.org/licenses/agpl-3.0

paths:


  ## Index Case Functions

  /data-request-client/cases:
    post:
      summary: Creates a new tracing case for index case data
      requestBody:
        required: true
        content:
          application/json; charset=UTF-8:
            schema:
              $ref: '#/components/schemas/DataRequestCaseClient'
      responses:
        '201':
          $ref: '#/components/responses/DataRequestCaseDetails'
      tags:
        - "IrisClientFrontend"
        - "IrisSidecarServer"
    get:
      summary: Fetches index cases
      responses:
        '200':
          $ref: '#/components/responses/DataRequestCaseDetailsList'
      tags:
        - "IrisClientFrontend"
        - "IrisSidecarServer"

  /data-request-client/cases/{caseId}:
    get:
      summary: Detail view for index data request with the data submissions already received
      parameters:
        - $ref: '#/components/parameters/CaseId'
      responses:
        '200':
          $ref: '#/components/responses/DataRequestCaseData'
      tags:
        - "IrisClientFrontend"
        - "IrisSidecarServer"

  ## When E-Mail service is implemented
  #/data-request-client/case/{caseId}/email:
  #  post:
  #    summary: Sends TAN/Nonce for case to specified e-mail address (to come)
  #    parameters:
  #      - $ref: '#/components/parameters/CaseId'
  #    requestBody:
  #      required: true
  #      content:
  #        application/json; charset=UTF-8:
  #          schema:
  #            $ref: '#/components/schemas/IndexCaseEmail'
  #    responses:
  #      '204':
  #        description: Email sent to recipient
  #    tags:
  #     - "IrisClientFrontend"
  #      - "IrisSidecarServer"


  ## DataRequests and DataSubmission for Contacts and Guest Lists


  /data-requests-client/locations:
    post:
      summary: Submits a new data request
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataRequestClient'
      responses:
        '201':
          $ref: '#/components/responses/DataRequestDetails'
      tags:
        - "IrisClientFrontend"
        - "IrisSidecarServer"
    get:
      summary: Fetches data requests
      responses:
        '200':
          $ref: '#/components/responses/DataRequestList'

      tags:
        - "IrisSidecarServer"
        - "IrisSidecarClient"
        - "IrisClientFrontend"
  /data-requests-client/locations/{code}:
    get:
      tags:
        - "IrisSidecarServer"
        - "IrisSidecarClient"
        - "IrisClientFrontend"
      summary: Detail view for Data Request with the data submissions already received
      operationId: getLocationDetails
      parameters:
        - $ref: '#/components/parameters/Code'
      responses:
        '200':
          $ref: '#/components/responses/DataRequestDetails'

  /data-requests/{code}:
    get:
      tags:
        - "IrisPublicServer"
        - "IrisAppClient"
      summary: 'get DataRequest by Code from IRIS Public Server'
      operationId: getDataRequestByCode
      parameters:
        - $ref: '#/components/parameters/Code'
      responses:
        '200':
          $ref: '#/components/responses/DataRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /data-submissions/{code}/contacts_events:
    post:
      tags:
        - "IrisPublicServer"
        - "IrisAppClient"
      summary: 'post DataSubmission for Contacts and Events to IRIS Public Server'
      operationId: postContactsEventsSubmission
      parameters:
        - $ref: '#/components/parameters/Code'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactsEventsSubmission'
      responses:
        '202':
          description: 'Submission was accepted and saved for later processing by the client in the health department.'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
  /data-submissions/{code}/guests:
    post:
      tags:
        - "IrisPublicServer"
        - "IrisAppClient"
      summary: 'post DataSubmission for Guest Lists to IRIS Public Server'
      operationId: postGuestsSubmission
      parameters:
        - $ref: '#/components/parameters/Code'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GuestsSubmission'
      responses:
        '202':
          description: 'Submission was accepted and saved for later processing by the client in the health department.'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
  /{data_request_endpoint}:
    post:
      tags:
        ## TODO: @Jens Welche Komponenten kommunizieren hier? Bitte Tags entsprechend anpassen.
        ## Die Komponenten gibt es noch nicht.
        - "IrisAppServer"
        - "IrisPublicClient"
        - "Implemented by the apps"
      description: 'This endpoint is implemented by the provider. Recives request from IRIS for provide guests data.'
      parameters:
        - in: path
          name: data_request_endpoint
          required: true
          description: 'Endpoint as configured by provider'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationDataRequest'
      responses:
        '202':
          description: 'Request accepted'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'

  ## IRIS Location Service

  /search/{search_keyword}:
    get:
      tags:
        - "IrisLocationService"
        - "IrisSidecarClient"
        - "IrisClientFrontend"
      parameters:
        - in: path
          required: true
          description: The search keyword
          name: search_keyword
          schema:
            type: string
            minimum: 4
      responses:
        '200':
          $ref: '#/components/responses/SearchResponse'

  /search/{providerId}/{locationId}:
    get:
      tags:
        - "IrisSidecarClient"
      parameters:
        - in: path
          required: true
          name: providerId
          schema:
            type: string
        - in: path
          required: true
          name: locationId
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/SearchResponse'
        '404':
          $ref: '#/components/responses/NotFound'

  /search-index/locations:
    put:
      summary: 'Recives contact information about locations that can be used to search for a specific location that was visited by a potentially infected person.'
      description: 'Locations are identifed by an ID that is owned by the provider. If an ID already exists, the information is overidden. The IDs are handled separately for each provider based on their authentication, so there is no overlap of ID between providers.'
      operationId: postLocationsToSearchIndex
      tags:
        - "IrisLocationService"
        - "IrisAppClient"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationList'
      responses:
        '204':
          description: 'Locations added to search index'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
  /search-index/locations/{id}:
    delete:
      summary: 'Deletes contact information about a specific location identified by the provider owned ID.'
      operationId: deleteLocationFromSearchIndex
      tags:
        - "IrisLocationService"
        - "IrisAppClient"
      parameters:
        - $ref: '#/components/parameters/LocationId'
      responses:
        '200':
          description: 'Location deleted'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # Login und auth
  /login:
    post:
      summary: Authenticates a user against IRIS client
      operationId: login
      tags:
        - "IrisSidecarClient"
        - "IrisClientFrontend"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
      responses:
        '200':
          $ref: '#/components/responses/Authenticated'
        '403':
          $ref: '#/components/responses/LoginFailed'

  # user management

  /user-profile:
    get:
      summary: Get authenticated IRIS user
      tags:
        - "IrisSidecarServer"
        - "IrisClientFrontend"
      responses:
        '200':
          $ref: '#/components/responses/User'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /users:
    get:
      summary: Get all IRIS users
      tags:
        - "IrisSidecarServer"
        - "IrisClientFrontend"
      responses:
        '200':
          $ref: '#/components/responses/UserList'
    post:
      summary: Create IRIS user
      tags:
        - "IrisSidecarServer"
        - "IrisClientFrontend"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpsert'
      responses:
        '201':
          $ref: '#/components/responses/UpsertedUser'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /users/{id}:
    put:
      summary: Update IRIS user
      tags:
        - "IrisSidecarServer"
        - "IrisClientFrontend"
      parameters:
        - $ref: '#/components/parameters/UserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpsert'
      responses:
        '200':
          $ref: '#/components/responses/UpsertedUser'
        '401':
          $ref: '#/components/responses/Unauthorized'
    delete:
      summary: Delete IRIS user
      tags:
        - "IrisSidecarServer"
        - "IrisClientFrontend"
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: 'User deleted'
        '401':
          $ref: '#/components/responses/Unauthorized'

security:
  - ApiKeyAuth: []
  - BearerAuth: []


components:
  responses:
    NotFound:
      description: 'The specified resource was not found.'
    Unauthorized:
      description: 'The client is unauthorized to access this API.'
    LoginFailed:
      description: 'The login attempt failed.'
    Authenticated:
      description: 'Authenticated'
      headers:
        Authentication-Info:
          schema:
            type: string
          description: Authenticated Bearer Token in form of 'Bearer eyJ0eXAiO[...]'
    UnprocessableEntity:
      description: 'The transferred entity is not expected for the data request.'
    DataRequest:
      description: 'A data request with all parameters relevant for the data submission and the links to the next possible steps for data submission.'
      content:
        application/hal+json:
          schema:
            $ref: '#/components/schemas/DataRequest'
      links:
        PostContactsEventsSubmission:
          description: 'If this link is present, the data for contacts and events can be submitted via it.'
          operationId: postContactsEventsSubmission
          parameters:
            code: 'The code from the data request.'
        PostGuestsSubmission:
          description: 'If this link is present, the data for guests can be submitted via it.'
          operationId: postGuestsSubmission
          parameters:
            code: 'The code from the data request.'
    SearchResponse:
      description: The response for the location search
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LocationList'
    LocationResponse:
      description: The response for fetch of one location
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ExistingDataRequestClientWithLocation'
    DataRequestList:
      description: List of existing data requests.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ExistingDataRequestClientWithLocationList'
    DataRequestDetails:
      description: Data request details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DataRequestDetails'
    DataRequestCaseDetails:
      description: Index case request details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DataRequestCaseExtendedDetails'
    DataRequestCaseDetailsList:
      description: List of index case request details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/IndexCaseDetailsList'
    DataRequestCaseData:
      description: Data from app provider for index case
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DataRequestCaseData'
    UpsertedUser:
      description: 'A newnly inserted or updated IRIS user'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    UserList:
      description: 'List of IRIS users'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserList'
    User:
      description: A single IRIS user
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
        

  parameters:
    Code:
      name: code
      in: path
      required: true
      description: 'The unique code of a data request in format of a UUID sent by the health department.'
      schema:
        type: string
    #        pattern: '^[2-9A-HKMNP-Z]{4}-[2-9A-HKMNP-Z]{4}-[2-9A-HKMNP-Z]{4}$'
    LocationId:
      name: id
      in: path
      required: true
      description: 'The unique ID of a location in the context of the provider.'
      schema:
        type: string
    UserId:
      name: id
      in: path
      required: true
      description: 'The ID of an IRIS Client user.'
      schema:
        type: string
    CaseId:
      name: caseId
      in: path
      required: true
      description: 'The internal unique CaseId of a index case in format.'
      schema:
        type: string

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      name: X-IRIS-API-KEY
      in: header
    BearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    ExistingDataRequestClientWithLocationList:
      type: object
      properties:
        dataRequests:
          type: array
          items:
            $ref: '#/components/schemas/ExistingDataRequestClientWithLocation'

    DataRequestDetails:
      allOf:
        - $ref: '#/components/schemas/ExistingDataRequestClientWithLocation'
        # for the MVP only a single submission
      properties:
        submissionData:
          $ref: '#/components/schemas/GuestList'
    #        - type: object
    #          required:
    #            - submissions
    #          properties:
    #            submissions:
    #              type: array
    #              items:
    #                $ref: '#/components/schemas/GuestList'

    Credentials:
      properties:
        userName:
          type: string
        password:
          type: string

    UserRole:
      type: string
      enum:
        - ADMIN
        - USER

    User:
      properties:
        id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        userName:
          type: string
        role:
          $ref: '#/components/schemas/UserRole'

    UserList:
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'

    UserUpsert:
      properties:
        firstName:
          type: string
        lastName:
          type: string
        userName:
          type: string
        password:
          type: string
        role:
          $ref: '#/components/schemas/UserRole'

    ExistingDataRequestClientWithLocation:
      properties:
        status:
          type: string
          enum:
            - DATA_REQUESTED
            - DATA_RECEIVED
            - CLOSED
        code:
          description: 'Code for DataRequest'
          type: string
        name:
          description: 'Friendly name of the request to be identified easily by GA'
          type: string
        externalRequestId:
          description: 'External ID outside of IRIS'
          type: string
        start:
          description: 'The start time for which data should be submitted with this request.'
          type: string
          format: date-time
        end:
          description: 'The end time for which data should be submitted with this request.'
          type: string
          format: date-time
        requestedAt:
          description: Timestamp when the data request was created.
          type: string
          format: date-time
        lastUpdatedAt:
          description: Timestamp when the data request was last updated.
          type: string
          format: date-time

        requestDetails:
          description: 'Details of the data request, specifying it in more detail and narrowing down the data to be provided (e.g. table and environment, seat, rank, ...).'
          type: string
        locationInformation:
          $ref: '#/components/schemas/LocationInformation'

    DataRequestCaseClient:
      description: 'Creates a new index case data request from FE - persistent data has to be refined. Starting with contact persons name.'
      type: object
      required:
        - externalCaseId
        - start
      properties:
        externalCaseId:
          description: 'External case identifier. E.g. CaseID in Sormas.'
          type: string
        name:
          description: 'Friendly name for given case'
          type: string
        comment:
          description: 'Comments on given case'
          type: string
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time

    IndexCaseDetailsList:
      description: 'List of index cases'
      type: array
      items:
        $ref: '#/components/schemas/DataRequestCaseDetails'

    DataRequestCaseExtendedDetails:
      description: 'Details for index case'
      type: object
      allOf:
        - $ref: '#/components/schemas/DataRequestCaseDetails'
        - type: object
          properties:
            nonce:
              description: 'Nonce used in provider app to authorize data upload'
              type: string

    DataRequestCaseDetails:
      description: 'Details for index case'
      allOf:
        - $ref: '#/components/schemas/DataRequestCaseClient'
        - type: object
          properties:
            caseId:
              description: 'Internal case identifier. Used in listings etc.'
              type: string
            status:
              type: string
              enum:
                - DATA_REQUESTED
                - DATA_RECEIVED
                - CLOSED

    DataRequestCaseData:
      allOf:
        - $ref: '#/components/schemas/DataRequestCaseExtendedDetails'
        - type: object
          properties:
            submissionData:
              $ref: '#/components/schemas/ContactsAndEvents'


    ## When email service is available
    #DataRequestCaseEmail:
    #  description: 'E-Mail address for sending tan/nonce'
    #  type: object
    #  properties:
    #    email:
    #      description: 'E-Mail address'
    #      type: string
    #      example: 'test@test.com'

    DataRequestClient:
      description: 'The data request that will be sent by the FE.'
      type: object
      required:
        - locationId
        - providerId
        - externalRequestId
        - start
        - end
      readOnly: true
      properties:
        locationId:
          description: 'Id of the location to request the data from.'
          type: string
        providerId:
          description: 'ID of the App provider serving the location.'
          type: string
        name:
          description: 'Friendly name of the request to be identified easily by GA'
          type: string
        externalRequestId:
          description: 'External ID outside of IRIS'
          type: string
        start:
          description: 'The start time for which data should be submitted with this request.'
          type: string
          format: date-time
        end:
          description: 'The end time for which data should be submitted with this request.'
          type: string
          format: date-time
        requestDetails:
          description: 'Details of the data request, specifying it in more detail and narrowing down the data to be provided (e.g. table and environment, seat, rank, ...).'
          type: string
    DataRequest:
      description: 'A data request with all parameters relevant for the data submission.'
      type: object
      required:
        - healthDepartment
        - keyOfHealthDepartment
        - keyReference
        - start
      readOnly: true
      properties:
        healthDepartment:
          description: 'Name of the requesting health department.'
          type: string
        keyOfHealthDepartment:
          description: 'The key of the requesting health department that must be used for encryption. The key is encoded with Base64.'
          type: string
        keyReference:
          description: 'Reference id of the given key. This reference must be included in the submission in order to identify the correct private key for decryption at the health department.'
          type: string
        start:
          description: 'The start time for which data should be submitted with this request.'
          type: string
          format: date-time
        end:
          description: 'The end time for which data should be submitted with this request.'
          type: string
          format: date-time
        requestDetails:
          description: 'Details of the data request, specifying it in more detail and narrowing down the data to be provided (e.g. table and environment, seat, rank, ...).'
          type: string
    DataSubmission:
      description: 'Basic data type of a data submission which contains the unencrypted metadata needed for processing.'
      type: object
      required:
        - keyReference
        - secret
      properties:
        secret:
          description: 'The encrypted secret key for encryption. (`keyToTransport` in the general description of the API.)'
          type: string
        keyReference:
          description: 'Reference to the used encryption key. This must be the value from keyReference of the DataRequest as this matches the passed and thus used key.'
          type: string
    ContactsEventsSubmission:
      allOf:
        - $ref: '#/components/schemas/DataSubmission'
        - type: object
          required:
            - encryptedData
          properties:
            encryptedData:
              $ref: '#/components/schemas/ContactsAndEvents'
    ContactsAndEvents:
      description: 'This data must be encrypted with the key of health department from DataRequest.keyOfHealthDepartment and must be encoded with Base64!(`dataToTransport` in the general description of the API.)'
      required:
        - contacts
        - events
        - dataProvider
      properties:
        contacts:
          $ref: '#/components/schemas/ContactPersonList'
        events:
          $ref: '#/components/schemas/EventList'
        dataProvider:
          type: object
          required:
            - firstName
            - lastName
            - dateOfBirth
          properties:
            firstName:
              type: string
            lastName:
              type: string
            dateOfBirth:
              type: string
              format: date
    ContactPersonList:
      description: 'A collection of contact persons who had contact with the queried person during the queried time. This data must be encrypted with the key of health department from DataRequest.keyOfHealthDepartment and must be encoded with Base64!'
      required:
        - contactPersons
      properties:
        contactPersons:
          type: array
          items:
            $ref: '#/components/schemas/ContactPerson'
        startDate:
          description: 'Start date of contacts for this list.'
          type: string
          format: date
        endDate:
          description: 'End date of contacts for this list.'
          type: string
          format: date
    ContactPerson:
      description: 'Extended person data type for contact persons who had contact with the queried person during the queried time.'
      allOf:
        - $ref: '#/components/schemas/Person'
        - type: object
          properties:
            workPlace:
              description: 'Additional informations about the work place of the contact person.'
              type: object
              properties:
                name:
                  description: 'Name of work place'
                  type: string
                pointOfContact:
                  type: string
                phone:
                  type: string
                  format: phone
                address:
                  $ref: '#/components/schemas/Address'
            contactInformation:
              description: 'Additional informations about the contact(s) with the queried person.'
              type: object
              properties:
                firstContactDate:
                  type: string
                  format: date
                lastContactDate:
                  type: string
                  format: date
                contactCategory:
                  $ref: '#/components/schemas/ContactCategory'
                basicConditions:
                  description:
                    'Informations about the basic conditions such as: from, to, place, inside|outside, mask yes|no, distance >=|< 1,5m, ventilated yes|no, remarks.'
                  type: string
    EventList:
      type: object
      description: 'A collection of events visited by the queried person during the queried time. This data must be encrypted with the key of health department from DataRequest.keyOfHealthDepartment and must be encoded with Base64!'
      required:
        - events
      properties:
        events:
          type: array
          items:
            $ref: '#/components/schemas/Event'
        startDate:
          description: 'Start date of visits for this list.'
          type: string
          format: date
        endDate:
          description: 'End date of visits for this list.'
          type: string
          format: date
    Event:
      description: 'An event, location or occasion visited by the queried person during the queried time.'
      required:
        - name
      properties:
        name:
          description: 'Name of the event'
          type: string
        phone:
          type: string
          format: phone
        address:
          $ref: '#/components/schemas/Address'
        additionalInformation:
          description: 'Additional informations about the event.'
          type: string
    GuestsSubmission:
      allOf:
        - $ref: '#/components/schemas/DataSubmission'
        - type: object
          required:
            - encryptedData
          properties:
            encryptedData:
              $ref: '#/components/schemas/GuestList'
    GuestList:
      description: 'A collection of guests who attended a queried event or location in the queried time. This data must be encrypted with the key of health department from DataRequest.keyOfHealthDepartment and must be encoded with Base64! (`dataToTransport` in the general description of the API.)'
      type: object
      required:
        - guests
        - dataProvider
      properties:
        guests:
          type: array
          items:
            $ref: '#/components/schemas/Guest'
        dataProvider:
          type: object
          required:
            - name
            - address
          properties:
            name:
              description: Name of Location, Institution or Organizer
              type: string
            address:
              required:
                - street
                - houseNumber
                - zipCode
                - city
              allOf:
                - $ref: '#/components/schemas/Address'
        additionalInformation:
          description: 'Additional informations about the guest list and the event or location.'
          type: string
        startDate:
          description: 'Start date/time of attendance for this guest list.'
          type: string
          format: date-time
        endDate:
          description: 'End date/time of attendance for this guest list.'
          type: string
          format: date-time
    Guest:
      description: 'Extended person data type for a guest who attended a queried event or location in the queried time.'
      allOf:
        - $ref: '#/components/schemas/Person'
        - type: object
          required:
            - attendanceInformation
          properties:
            attendanceInformation:
              type: object
              required:
                - attendFrom
                - attendTo
              properties:
                descriptionOfParticipation:
                  description: 'Description of the type of participation.'
                  type: string
                  example: 'Guest or Staff'
                attendFrom:
                  description: 'Start date/time of attendance of this guest.'
                  type: string
                  format: date-time
                attendTo:
                  description: 'End date/time of attendance of this guest.'
                  type: string
                  format: date-time
                additionalInformation:
                  description: 'Additional informations about the attendance.'
                  type: string
                  example: 'Table: 3; Floor: 2'
            identityChecked:
              description: 'The app indicates whether the data are verified with respect to identity (e.g. by phone number) = TRUE or whether they are unverified form inputs = FALSE.'
              type: boolean
    Person:
      description: 'Basic data type of a person.'
      type: object
      required:
        - firstName
        - lastName
      properties:
        firstName:
          type: string
        lastName:
          type: string
        dateOfBirth:
          type: string
          format: date
        sex:
          $ref: '#/components/schemas/Sex'
        email:
          type: string
          format: email
        phone:
          type: string
          format: phone
        mobilePhone:
          type: string
          format: phone
        address:
          $ref: '#/components/schemas/Address'
    Address:
      type: object
      nullable: true
      properties:
        street:
          type: string
        houseNumber:
          type: string
          format: house-number
        zipCode:
          type: string
          format: zip-code
        city:
          type: string
    Sex:
      type: string
      default: UNKNOWN
      enum:
        - MALE
        - FEMALE
        - OTHER
        - UNKNOWN
    ContactCategory:
      description: 'Category of contact that describes the intensity and thus the risk of infection of the contact.'
      type: string
      nullable: true
      enum:
        - HIGH_RISK
        - HIGH_RISK_MED
        - MEDIUM_RISK_MED
        - LOW_RISK
        - NO_RISK
    LocationList:
      type: object
      required:
        - "locations"
      properties:
        locations:
          type: array
          items:
            $ref: '#/components/schemas/LocationInformation'
    LocationInformation:
      type: object
      required:
        - "id"
        - "name"
        - "contact"
        - "providerId"
      properties:
        id:
          type: string
          description: 'Interne ID (beim Provider)'
          example: '5eddd61036d39a0ff8b11fdb'
        providerId:
          type: string
          description: 'ID des App providers'
          example: '5eddd61036d39a0ff8b11fdb'
        name:
          type: string
          description: 'Name des Standorts'
          example: 'Restaurant Alberts'
        publicKey:
          type: string
          description: 'Öffentlicher Schlüssel, ggf. für Nachrichtenaustausch'
        contact:
          $ref: '#/components/schemas/LocationContact'
        contexts:
          type: array
          items:
            $ref: '#/components/schemas/LocationContext'
    LocationContact:
      description: 'Kontaktperson des Standorts'
      type: object
      required:
        - "address"
      properties:
        officialName:
          type: string
          description: 'Offizieller Unternehmensname'
          example: 'Darfichrein GmbH'
        representative:
          type: string
          description: 'Ansprechpartner für dieses Unternehmen'
          example: 'Silke '
        address:
          $ref: '#/components/schemas/LocationAddress'
        ownerEmail:
          type: string
          description: 'E-Mail des Inhabers'
          example: 'covid@restaurant.de'
        email:
          type: string
          description: 'ggf. E-Mail einer weiteren Kontaktperson'
          example: 'covid2@restaurant.de'
        phone:
          type: string
          description: 'Telefonnummer eines Ansprechpartners'
          example: 'die bleibt privat :-)'
    LocationContext:
      type: object
      description: 'Ein Standort hat ggf. weitere Informationen wie Tische/Räume, etc.'
      required:
        - "id"
        - "name"
      properties:
        id:
          type: string
          description: 'Interne ID des Kontext'
          example: '5f4bfff742c1bf5f72918851'
        name:
          type: string
          description: 'Bezeichnung'
          example: 'Raum 0815'
    LocationAddress:
      description: 'Anschrift des Standorts'
      required:
        - street
        - city
        - zip
      properties:
        street:
          type: string
          description: 'street + number'
          example: 'Türkenstr. 7'
        city:
          type: string
          description: 'Stadt'
          example: 'München'
        zip:
          type: string
          description: 'Postleitzahl'
          example: '80333'

    LocationDataRequest:
      description: 'All information needed to create a new TracingTicket'
      allOf:
        - $ref: '#/components/schemas/DataRequest'
        - type: object
          required:
            - "submissionUri"
            - "locationId"
            - "end"
          properties:
            submissionUri:
              type: string
              description: 'The URI that can be used to submit contact data for this tracing code.'
              example: 'https://iris.inoeg.de/api/data-submissions/{code}/guests'
            locationId:
              type: string
              description: 'The id of the location.'
              example: '35b7df90-8670-409a-9375-15a56fd995c1'
