/*
 * SORMAS REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.55.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package de.healthIMIS.sormas.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import de.healthIMIS.sormas.client.model.Disease;
import de.healthIMIS.sormas.client.model.SymptomsDto;
import de.healthIMIS.sormas.client.model.VisitStatus;
import io.swagger.v3.oas.annotations.media.Schema;
import java.time.OffsetDateTime;
import java.time.Instant;

/**
 * ExternalVisitDto
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen",
		date = "2021-01-28T11:46:54.705673+01:00[Europe/Berlin]")
public class ExternalVisitDto {
	@JsonProperty("personUuid")
	private String personUuid = null;

	@JsonProperty("disease")
	private Disease disease = null;

	@JsonProperty("visitDateTime")
	private Instant visitDateTime = null;

	@JsonProperty("visitStatus")
	private VisitStatus visitStatus = null;

	@JsonProperty("visitRemarks")
	private String visitRemarks = null;

	@JsonProperty("symptoms")
	private SymptomsDto symptoms = null;

	@JsonProperty("reportLat")
	private Double reportLat = null;

	@JsonProperty("reportLon")
	private Double reportLon = null;

	@JsonProperty("reportLatLonAccuracy")
	private Float reportLatLonAccuracy = null;

	public ExternalVisitDto personUuid(String personUuid) {
		this.personUuid = personUuid;
		return this;
	}

	/**
	 * Get personUuid
	 * 
	 * @return personUuid
	 **/
	@Schema(required = true, description = "")
	public String getPersonUuid() {
		return personUuid;
	}

	public void setPersonUuid(String personUuid) {
		this.personUuid = personUuid;
	}

	public ExternalVisitDto disease(Disease disease) {
		this.disease = disease;
		return this;
	}

	/**
	 * Get disease
	 * 
	 * @return disease
	 **/
	@Schema(required = true, description = "")
	public Disease getDisease() {
		return disease;
	}

	public void setDisease(Disease disease) {
		this.disease = disease;
	}

	public ExternalVisitDto visitDateTime(Instant visitDateTime) {
		this.visitDateTime = visitDateTime;
		return this;
	}

	/**
	 * Get visitDateTime
	 * 
	 * @return visitDateTime
	 **/
	@Schema(required = true, description = "")
	public Instant getVisitDateTime() {
		return visitDateTime;
	}

	public void setVisitDateTime(Instant visitDateTime) {
		this.visitDateTime = visitDateTime;
	}

	public ExternalVisitDto visitStatus(VisitStatus visitStatus) {
		this.visitStatus = visitStatus;
		return this;
	}

	/**
	 * Get visitStatus
	 * 
	 * @return visitStatus
	 **/
	@Schema(required = true, description = "")
	public VisitStatus getVisitStatus() {
		return visitStatus;
	}

	public void setVisitStatus(VisitStatus visitStatus) {
		this.visitStatus = visitStatus;
	}

	public ExternalVisitDto visitRemarks(String visitRemarks) {
		this.visitRemarks = visitRemarks;
		return this;
	}

	/**
	 * Get visitRemarks
	 * 
	 * @return visitRemarks
	 **/
	@Schema(description = "")
	public String getVisitRemarks() {
		return visitRemarks;
	}

	public void setVisitRemarks(String visitRemarks) {
		this.visitRemarks = visitRemarks;
	}

	public ExternalVisitDto symptoms(SymptomsDto symptoms) {
		this.symptoms = symptoms;
		return this;
	}

	/**
	 * Get symptoms
	 * 
	 * @return symptoms
	 **/
	@Schema(description = "")
	public SymptomsDto getSymptoms() {
		return symptoms;
	}

	public void setSymptoms(SymptomsDto symptoms) {
		this.symptoms = symptoms;
	}

	public ExternalVisitDto reportLat(Double reportLat) {
		this.reportLat = reportLat;
		return this;
	}

	/**
	 * Get reportLat
	 * 
	 * @return reportLat
	 **/
	@Schema(description = "")
	public Double getReportLat() {
		return reportLat;
	}

	public void setReportLat(Double reportLat) {
		this.reportLat = reportLat;
	}

	public ExternalVisitDto reportLon(Double reportLon) {
		this.reportLon = reportLon;
		return this;
	}

	/**
	 * Get reportLon
	 * 
	 * @return reportLon
	 **/
	@Schema(description = "")
	public Double getReportLon() {
		return reportLon;
	}

	public void setReportLon(Double reportLon) {
		this.reportLon = reportLon;
	}

	public ExternalVisitDto reportLatLonAccuracy(Float reportLatLonAccuracy) {
		this.reportLatLonAccuracy = reportLatLonAccuracy;
		return this;
	}

	/**
	 * Get reportLatLonAccuracy
	 * 
	 * @return reportLatLonAccuracy
	 **/
	@Schema(description = "")
	public Float getReportLatLonAccuracy() {
		return reportLatLonAccuracy;
	}

	public void setReportLatLonAccuracy(Float reportLatLonAccuracy) {
		this.reportLatLonAccuracy = reportLatLonAccuracy;
	}

	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		ExternalVisitDto externalVisitDto = (ExternalVisitDto) o;
		return Objects.equals(this.personUuid, externalVisitDto.personUuid)
				&& Objects.equals(this.disease, externalVisitDto.disease)
				&& Objects.equals(this.visitDateTime, externalVisitDto.visitDateTime)
				&& Objects.equals(this.visitStatus, externalVisitDto.visitStatus)
				&& Objects.equals(this.visitRemarks, externalVisitDto.visitRemarks)
				&& Objects.equals(this.symptoms, externalVisitDto.symptoms)
				&& Objects.equals(this.reportLat, externalVisitDto.reportLat)
				&& Objects.equals(this.reportLon, externalVisitDto.reportLon)
				&& Objects.equals(this.reportLatLonAccuracy, externalVisitDto.reportLatLonAccuracy);
	}

	@Override
	public int hashCode() {
		return Objects.hash(personUuid, disease, visitDateTime, visitStatus, visitRemarks, symptoms, reportLat, reportLon,
				reportLatLonAccuracy);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class ExternalVisitDto {\n");

		sb.append("    personUuid: ").append(toIndentedString(personUuid)).append("\n");
		sb.append("    disease: ").append(toIndentedString(disease)).append("\n");
		sb.append("    visitDateTime: ").append(toIndentedString(visitDateTime)).append("\n");
		sb.append("    visitStatus: ").append(toIndentedString(visitStatus)).append("\n");
		sb.append("    visitRemarks: ").append(toIndentedString(visitRemarks)).append("\n");
		sb.append("    symptoms: ").append(toIndentedString(symptoms)).append("\n");
		sb.append("    reportLat: ").append(toIndentedString(reportLat)).append("\n");
		sb.append("    reportLon: ").append(toIndentedString(reportLon)).append("\n");
		sb.append("    reportLatLonAccuracy: ").append(toIndentedString(reportLatLonAccuracy)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

}
